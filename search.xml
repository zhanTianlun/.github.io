<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【软件设计原则】七大软件设计原则</title>
    <url>/2019/04/20/001/</url>
    <content><![CDATA[<h5 id="1-开闭原则：对扩展开放，对修改关闭。"><a href="#1-开闭原则：对扩展开放，对修改关闭。" class="headerlink" title="1.开闭原则：对扩展开放，对修改关闭。"></a>1.开闭原则：对扩展开放，对修改关闭。</h5><p>​    例子：咕泡课程：有java,前端，测试等等。每种课程有id,名称，价格。但是都不一样：新建一个抽象的接口Icouce，里面有三个方法，getid,getName,getPrice，新建一个javaCource，继承接口,重写三个方法。然后创建一个构造器。然后创建一个测试类，创建抽象接口的具体实现类，给属性赋值。然后就可以得到javaCouce的id,name,privce。 问题是现在课程可能会打折。所以就要创建一个javaDiscountCouse类在里面对price进行打折。这样就可以在获取折后价格的同时获取到原价了。</p>
<h5 id="2-依赖倒置原则："><a href="#2-依赖倒置原则：" class="headerlink" title="2.依赖倒置原则："></a>2.依赖倒置原则：</h5><p>​    高层模块不应该依赖底层模块。两者都应该依赖其抽象。抽象应该依赖细节，细节应该依赖抽象。针对接口编程，不针对实现编程。 可以减少类之间的耦合性，提高系统的稳定性。提高代码的可阅读性和可维护性，可以降低修改程序造成的风险。</p>
<h5 id="3-单一职责原则："><a href="#3-单一职责原则：" class="headerlink" title="3.单一职责原则："></a>3.单一职责原则：</h5><p>​    不要存在一个导致类变更的原因。一个类，接口，方法只负责一项职责。优点：降低类的耦合性，提高类的可阅读性，提高系统的可维护性，降低变更引起的风险。</p>
<h5 id="4-接口隔离原则："><a href="#4-接口隔离原则：" class="headerlink" title="4.接口隔离原则："></a>4.接口隔离原则：</h5><p>​    用多个单一的接口，而不是一个统一的接口。客户端不应该依赖不需要的接口。注意：一个类对应一个类的依赖应该建立在最小的接口上，建立单一的接口，不要建立庞大臃肿的解耦。尽量的细化接口，接口中的方法尽量的少。注意适度原则，一定要尽量的适度。</p>
<h5 id="5-迪米特法则："><a href="#5-迪米特法则：" class="headerlink" title="5.迪米特法则："></a>5.迪米特法则：</h5><p>​    一个对象应该对其他对象保持最少的了解，又叫最少知道原则。尽量降低类和类之间的耦合。强调只和朋友交流，不和陌生人说话。朋友，出现在成员变量，方法的输入输出参数中的类为成员朋友类，出现在方法体内部的类不是朋友类。</p>
<h5 id="6-里式替换原则："><a href="#6-里式替换原则：" class="headerlink" title="6.里式替换原则："></a>6.里式替换原则：</h5><p>​    如果每一个类型为T1的对象O1,都有类型为T2的对象O2,使得以T1定义的所有程序P在所有的对象O1都替换成O2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。定义扩展：一个软件实体如果适用一个父类的话，那一定适用于其子类，所有引用父类的地方必须能透明的使用其子类对象，子类对象能够替换父类对象，而程序逻辑不变。</p>
<p>​        引申意义：子类可以扩展父类的功能，但是不能改变父类的功能。</p>
<p>​        含义1：子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。</p>
<p>​        含义2：子类中可以增加自己特有的方法。</p>
<p>​        含义3：当子类的方法重载父类的方法时，方法的前置条件（即方法的输入，入参）要比父类的输入参数要宽松。</p>
<p>​        含义4：当子类的方法实现父类的方法时（重写，重载或实现抽象的方法），方法的后置条件（即方法的输出，返回值）要比父类更严格或相等。</p>
<h5 id="7-合成，聚合复用原则："><a href="#7-合成，聚合复用原则：" class="headerlink" title="7.合成，聚合复用原则："></a>7.合成，聚合复用原则：</h5><p>​    尽量使用对象组合，聚合。而不是继承达到软件复用的目的。聚合has-a和组合contains-a 优点：可以是系统更加灵活，降低类与类之间的耦合度，一个类的变化对其他类造成的影响相对较少。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>【Bug】maven如何排除依赖</title>
    <url>/2020/04/22/1/</url>
    <content><![CDATA[<h5 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h5><p>​    java.lang.IncompatibleClassChangeError: Found class org.objectweb.asm.MethodVisitor, but interface was expected at org.lilystudio.smarty4j.Template.toParser(Template.java:357)</p>
<p>java.lang.IncompatibleClassChangeError: Found class org.objectweb.asm.MethodVisitor, but interface was expected at org.lilystudio.smarty4j.Template.toParser(Template.java:357) at org.lilystudio.smarty4j.Template.<init>(Template.java:134) at org.lilystudio.smarty4j.Template.<init>(Template.java:152) at org.lilystudio.smarty4j.Engine.getTemplate(Engine.java:317) at com.doit.framework.mvc.core.Doit.render(Doit.java:769) at com.doit.framework.mvc.core.Doit.forwardTo(Doit.java:711) at com.doit.framework.mvc.core.Doit.doPost(Doit.java:286) at com.doit.framework.mvc.core.Doit.doGet(Doit.java:83) at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at com.doit.framework.mvc.filter.FrameServletFilter.doFilter(FrameServletFilter.java:30) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at com.doit.framework.mvc.filter.SetCharacterEncodingFilter.doFilter(SetCharacterEncodingFilter.java:32) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:137) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:660) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:798) at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:808) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1498) at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:748)</init></init></p>
<h5 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h5><p>​    这个错误便表示使用jar包文件的依赖冲突引起的，仔细查看jar包，会发现有同一个jar的版本冲突：</p>
<p><img src="https://img-blog.csdnimg.cn/20190726102746100.jpg" alt></p>
<p><img src="https://img-blog.csdnimg.cn/20190726102814362.jpg" alt></p>
<p>​    在引入neo4j的jar包中，也包含了对 asm-6.2.jar 的引用。</p>
<h5 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h5><p>​    在neo4j的jar包中排除asm的依赖。  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.neo4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>neo4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Exclude asm --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.ow2.asm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>asm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Bug</tag>
      </tags>
  </entry>
</search>
